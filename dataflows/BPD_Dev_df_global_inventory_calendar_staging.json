{"name":"df_global_inventory_calendar_staging","description":"This dataflow contains Dimension and Fact Tables that are used in the Corporate Inventory Report which is located in the \n\nWorkspace - Corporate Inventory Reports\nWorkspace - Corporate Inventory DataModels\n\nStaging Flows\n\nstaging_global_inventory_m20detail_flow\nstaging_global_inventory_value_flow","version":"1.0","culture":"en-US","modifiedTime":"2022-07-08T07:41:35.5946852+00:00","pbi:mashup":{"fastCombine":true,"allowNativeQueries":true,"queriesMetadata":{"pM20Detail":{"queryId":"ec4c021a-4825-48ac-966b-58fa31eb935d","queryName":"pM20Detail","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pM20DetailAll":{"queryId":"2965b6ac-91d9-4192-9af1-155129dc719a","queryName":"pM20DetailAll","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pInventoryValue":{"queryId":"5a176480-b080-44b9-ae62-a957632271ca","queryName":"pInventoryValue","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"DIM_Time Balance Week":{"queryId":"171c1f08-7c59-4a4b-8ae9-35c394332862","queryName":"DIM_Time Balance Week","queryGroupId":"a0966e5b-d860-4160-b742-7c26403daafe","loadEnabled":true},"DIM_Calendar":{"queryId":"b1df9ae8-9042-4ea7-877f-b3ce191ebb5c","queryName":"DIM_Calendar","queryGroupId":"a0966e5b-d860-4160-b742-7c26403daafe","loadEnabled":true},"DIM_Fiscal Context":{"queryId":"a1afd083-312b-4a1b-9db4-9a351b582fda","queryName":"DIM_Fiscal Context","queryGroupId":"a0966e5b-d860-4160-b742-7c26403daafe","loadEnabled":true},"KeepColumn":{"queryId":"2f4ff8fa-1b12-40a2-a2b7-6ab7e8f858ac","queryName":"KeepColumn","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"RemoveColumn":{"queryId":"c332635d-b620-4c74-b1e7-f5f74389d9f5","queryName":"RemoveColumn","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"SnowflakeQuery":{"queryId":"f53ce5ac-0014-441f-a0f5-c540fdf4557c","queryName":"SnowflakeQuery","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"SnowflakeViewFromApps":{"queryId":"e91a9a45-7191-4eb3-992c-81d46574f352","queryName":"SnowflakeViewFromApps","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"SnowflakeTableFromApps":{"queryId":"375cc2d2-bb5b-45b1-81eb-b049710017f4","queryName":"SnowflakeTableFromApps","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"SnowflakeDataFromApps":{"queryId":"38536486-65cc-4738-abce-11539f34b9a7","queryName":"SnowflakeDataFromApps","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"FilterRowsbyColumn":{"queryId":"cc08daf4-2d5e-4da7-b970-d2acd9831a4c","queryName":"FilterRowsbyColumn","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"FilterNRows":{"queryId":"afd5b02b-0d56-4ee2-9c35-a0220a0bb1cb","queryName":"FilterNRows","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"GetEntity":{"queryId":"00aa1ccc-3354-4a12-92fa-d65ddc953bf4","queryName":"GetEntity","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"GetEntityFromWorkspace":{"queryId":"d7288925-e451-4640-bf3f-fc75518a1b8f","queryName":"GetEntityFromWorkspace","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"pWorkSpace":{"queryId":"136ef995-7550-4d55-b665-c306895cdb40","queryName":"pWorkSpace","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pDataFlow":{"queryId":"7f5f0e03-206a-413b-beab-85729ab5f679","queryName":"pDataFlow","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pFiscalCalendarDateFilter":{"queryId":"d4299f69-5646-40fe-a0f6-d88c1cedebff","queryName":"pFiscalCalendarDateFilter","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pSetMaxRows":{"queryId":"bea6a77d-6c5d-4e46-bc5f-0f951fe6f99b","queryName":"pSetMaxRows","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pOrganizationOrgs":{"queryId":"c53f6f06-7342-4e22-ab87-beab297e444e","queryName":"pOrganizationOrgs","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pTBU":{"queryId":"712aa63e-6676-42aa-9cfe-49f9254bd004","queryName":"pTBU","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pServerName":{"queryId":"9678b5e1-618d-4bed-8f47-a1e87cc65529","queryName":"pServerName","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pWarehouse":{"queryId":"f50e04c7-e91c-43ea-ac0e-154e3647e240","queryName":"pWarehouse","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pRole":{"queryId":"e7a0453e-71ac-4d6d-b576-c087fb422555","queryName":"pRole","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pDatabase":{"queryId":"6f2370f4-665d-4fdd-b09e-74757bd1d9d4","queryName":"pDatabase","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pTextColumns":{"queryId":"84ae23d9-f434-4633-ac64-d5a0658a06c2","queryName":"pTextColumns","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pNumberColumns":{"queryId":"0be1e274-784f-4b8a-95b0-6228b8506cf3","queryName":"pNumberColumns","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pDateColumns":{"queryId":"c34b9dae-2e82-4b86-a6a0-40e51b54f94f","queryName":"pDateColumns","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"pSchema":{"queryId":"a10fb2b5-35a2-47b4-9b37-7882aff2c4af","queryName":"pSchema","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f"},"ListOfOrgs":{"queryId":"f1f610fc-6348-47ae-86af-692f404cb1ce","queryName":"ListOfOrgs","queryGroupId":"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f","loadEnabled":true},"DIM_Fiscal Calendar":{"queryId":"3b0dccaa-1e63-446a-9aaf-f7bf41d391a7","queryName":"DIM_Fiscal Calendar","queryGroupId":"a0966e5b-d860-4160-b742-7c26403daafe","loadEnabled":true},"DIM_FiscalCalendar_COHR":{"queryId":"614efee9-617d-457f-b647-cf6ee53817e1","queryName":"DIM_FiscalCalendar_COHR","queryGroupId":"a0966e5b-d860-4160-b742-7c26403daafe","loadEnabled":true},"DIM_FiscalCalendar_IIVI":{"queryId":"32a6a3a8-6755-4177-ba3d-9c04668d9a1b","queryName":"DIM_FiscalCalendar_IIVI","queryGroupId":"a0966e5b-d860-4160-b742-7c26403daafe","loadEnabled":true},"Version History Dataflow":{"queryId":"16844e25-79c0-48e1-a234-7adb2c775418","queryName":"Version History Dataflow","queryGroupId":"a91191ed-8efb-400b-bad7-2b8a42e2d413","loadEnabled":true},"INFO_DataUpdateInfoInventoryVelocity":{"queryId":"3200c79b-04dc-4d96-bb86-666dad853946","queryName":"INFO_DataUpdateInfoInventoryVelocity","queryGroupId":"d535d7f0-f50c-47a1-a1c5-b52444b9ad0e","loadEnabled":true},"GetColumnNames":{"queryId":"f124556a-ff71-4757-89d1-938d689b772a","queryName":"GetColumnNames","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"SetColumnType":{"queryId":"ef8083ec-f84e-4d39-8c4b-38e7454a9282","queryName":"SetColumnType","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"RenameColumn":{"queryId":"4b94a022-6b82-46d8-8318-785ebc38e154","queryName":"RenameColumn","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"FilterRowsbyDate":{"queryId":"763819b7-1ac3-4543-9744-52e363b881dc","queryName":"FilterRowsbyDate","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"SplitDateTimeColumn":{"queryId":"a55a0d1e-4523-4716-9caf-8086c5484b47","queryName":"SplitDateTimeColumn","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"CreateKeyField":{"queryId":"7e7c5585-89dd-4ce2-94ec-171691908b06","queryName":"CreateKeyField","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"},"SortColumnNames":{"queryId":"589f3ae2-e9ea-4240-800d-b73722a028dc","queryName":"SortColumnNames","queryGroupId":"7363d107-1f3d-48de-be9c-f033354d282e"}},"document":"section Section1;\r\nshared pM20Detail = \"C:\\Users\\PeacocCo\\Coherent, Inc\\Power BI Community - Projects\\Inventory\\2. Measure\\DataModels\\test\\data\\XXREP_M20_DETAIL_V.csv\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pM20DetailAll = \"C:\\Users\\PeacocCo\\Coherent, Inc\\Power BI Community - Projects\\Inventory\\2. Measure\\DataModels\\test\\data\\XXREP_M20_DETAIL_V_ALL_ACCOUNTS.csv\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pInventoryValue = \"C:\\Users\\PeacocCo\\Coherent, Inc\\Power BI Community - Projects\\Inventory\\2. Measure\\DataModels\\test\\data\\XXREP_INVVALUE_V.csv\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared #\"DIM_Time Balance Week\" = let\n  Entity = GetEntityFromWorkspace(\"COHR_Dataflows\", \"INV_VELOCITY\", \"Time Balance Week\")\nin\n  Entity;\r\n[Description = \"TABLENAME: Fiscal Calendar Days\"]\r\nshared DIM_Calendar = let\n  Source = GetEntity(\"Fiscal Calendar Days\")\nin\n  Source;\r\nshared #\"DIM_Fiscal Context\" = let\n    Source = GetEntity(\"Fiscal Context\")\nin\n    Source;\r\nshared KeepColumn = let\n    // This function filters a table (Entity) by the first\n    // N rows pass FilterValue to set number of rows to \n    // return\n    // :returns: Table\n    RemoveColumns =\n        (Entity as table, ColumnNames as text) =>\n            let\n                CleanList =\n                    List.Transform(\n                        List.Transform(\n                            Text.Split(ColumnNames, \",\"),\n                            Text.Trim\n                        ),\n                        Text.Upper\n                    ),\n                RemovedColumnList =\n                    List.Select(\n                        Table.ColumnNames(Entity),\n                        each not (List.Contains(CleanList, Text.Upper(_)))\n                    ),\n                ModifiedEntity =\n                    if ColumnNames = \"\" then\n                        Entity\n                    else\n                        Table.RemoveColumns(\n                            Entity,\n                            RemovedColumnList\n                        )\n            in\n                ModifiedEntity\nin\n    RemoveColumns;\r\nshared RemoveColumn = let\n    // This function filters a table (Entity) by the first\n    // N rows pass FilterValue to set number of rows to \n    // return\n    // :returns: Table\n    RemoveColumns =\n        (Entity as table, ColumnNames as text) =>\n            let\n                CleanList =\n                    List.Transform(\n                        List.Transform(\n                            Text.Split(ColumnNames, \",\"),\n                            Text.Trim\n                        ),\n                        Text.Upper\n                    ),\n                RemovedColumnList =\n                    List.Select(\n                        Table.ColumnNames(Entity),\n                        each List.Contains(CleanList, Text.Upper(_))\n                    ),\n                ModifiedEntity =\n                    Table.RemoveColumns(\n                        Entity,\n                        RemovedColumnList\n                    )\n            in\n                ModifiedEntity\nin\n    RemoveColumns;\r\nshared SnowflakeQuery = let\n    // This function runs a query on the Snowflake database\n    // pass a sql query as a string to get the results of the query  \n    // returned\n    // :returns: Table\n    SnowflakeQuery =\n        (SQLQuery as text) =>\n            let\n                connTimeout = 2 * 60 * 60, // hr * mins * sec\n                commTimeout = 2 * 60 * 60, // hr * mins * secs\n                ReturnedValue =\n                    Value.NativeQuery(\n                        Snowflake.Databases(\n                            pServerName,\n                            pWarehouse,\n                            [\n                                Role = pRole,\n                                CreateNavigationProperties = null,\n                                ConnectionTimeout = connTimeout,\n                                CommandTimeout = commTimeout\n                            ]\n                        ){[Name = pDatabase]}\n                            [Data],\n                        SQLQuery,\n                        null,\n                        [EnableFolding = true]\n                    )\n            in\n                ReturnedValue\nin\n    SnowflakeQuery;\r\nshared SnowflakeViewFromApps = let\n    fxGetSnowflakeView =\n        (ViewName as text) =>\n            let\n                connTimeout = 2 * 60 * 60,\n                // hr * mins * sec\n                commTimeout = 2 * 60 * 60,\n                // hr * mins * secs\n                Source =\n                    Snowflake.Databases(\n                        pServerName,\n                        pWarehouse,\n                        [\n                            CreateNavigationProperties = null,\n                            ConnectionTimeout = connTimeout,\n                            CommandTimeout = commTimeout\n                        ]\n                    ),\n                Database =\n                    Source{[\n                        Name = pDatabase,\n                        Kind = \"Database\"\n                    ]}\n                        [Data],\n                Schema =\n                    Database{[\n                        Name = pSchema,\n                        Kind = \"Schema\"\n                    ]}\n                        [Data],\n                Entity =\n                    Schema{[\n                        Name = ViewName,\n                        Kind = \"View\"\n                    ]}\n                        [Data]\n            in\n                Schema\nin\n    fxGetSnowflakeView;\r\nshared SnowflakeTableFromApps = let\n    fxGetSnowflakeTable =\n        (TableName as text) =>\n            let\n                connTimeout = 2 * 60 * 60,\n                // hr * mins * sec\n                commTimeout = 2 * 60 * 60,\n                // hr * mins * secs\n                Source =\n                    Snowflake.Databases(\n                        pServerName,\n                        pWarehouse,\n                        [\n                            CreateNavigationProperties = null,\n                            ConnectionTimeout = connTimeout,\n                            CommandTimeout = commTimeout\n                        ]\n                    ),\n                Database =\n                    Source{[\n                        Name = pDatabase,\n                        Kind = \"Database\"\n                    ]}\n                        [Data],\n                Schema =\n                    Database{[\n                        Name = pSchema,\n                        Kind = \"Schema\"\n                    ]}\n                        [Data],\n                Entity =\n                    Schema{[\n                        Name = TableName,\n                        Kind = \"Table\"\n                    ]}\n                        [Data]\n            in\n                Entity\nin\n    fxGetSnowflakeTable;\r\nshared SnowflakeDataFromApps = let\n    fxGetSnowflakeTable =\n        (TableName as text, optional EntityKind as text) =>\n            let\n                connTimeout = 2 * 60 * 60,\n                // hr * mins * sec\n                commTimeout = 2 * 60 * 60,\n                // hr * mins * secs\n                Source =\n                    Snowflake.Databases(\n                        pServerName,\n                        pWarehouse,\n                        [\n                            CreateNavigationProperties = null,\n                            ConnectionTimeout = connTimeout,\n                            CommandTimeout = commTimeout\n                        ]\n                    ),\n                Database =\n                    Source{[\n                        Name = pDatabase,\n                        Kind = \"Database\"\n                    ]}\n                        [Data],\n                Schema =\n                    Database{[\n                        Name = pSchema,\n                        Kind = \"Schema\"\n                    ]}\n                        [Data],\n                Entity =\n                    Schema{[\n                        Name = TableName,\n                        Kind = if EntityKind = \"\" then \"View\" else EntityKind\n                    ]}\n                        [Data]\n            in\n                Entity\nin\n    fxGetSnowflakeTable;\r\nshared FilterRowsbyColumn = let\n    // This function filters a table (Entity) by the first\n    // N rows pass FilterValue to set number of rows to \n    // return\n    // :returns: Table\n    FilterColumn =\n        (Entity as table, FilterValue as text, ColumnName as text) =>\n            let\n                CleanFilterValue =\n                    List.Transform(\n                        List.Transform(\n                            Text.Split(FilterValue, \",\"),\n                            Text.Trim\n                        ),\n                        Text.Upper\n                    ),\n                Filter =\n                    if\n                        List.AnyTrue(\n                            {\n                                not List.Contains(\n                                    Table.ColumnNames(Entity),\n                                    ColumnName\n                                ),\n                                FilterValue = \"\"\n                            }\n                        )\n                    then\n                        Entity\n                    else\n                        try\n                            {\n                                Table.SelectRows(\n                                    Entity,\n                                    each\n                                        List.Contains(\n                                            List.Buffer(CleanFilterValue),\n                                            Text.Upper(Record.Field(_, ColumnName))\n                                        )\n                                )\n                            }\n                        otherwise\n                            {\n                                Entity\n                            },\n                Result =\n                    if Value.Is(Filter, List.Type) then\n                        Filter{0}\n                    else\n                        Filter\n            in\n                Result\nin\n    FilterColumn;\r\nshared FilterNRows = let\n    // This function filters a table (Entity) by the first\n    // N rows pass FilterValue to set number of rows to \n    // return\n    // :returns: Table\n    FilterMaxRows =\n        (Entity as table, FilterValue as number) =>\n            let\n                FilterMaxNoOfRows =\n                    if FilterValue > 0 then\n                        Table.FirstN(Entity, FilterValue)\n                    else\n                        Entity\n            in\n                FilterMaxNoOfRows\nin\n    FilterMaxRows;\r\nshared GetEntity = let\n    // This function retrieves a table (Entity) from the given\n    // workspaceName and dataflowName which are pre-defined\n    // parameters \n    // Set the pWorkSpace and pDataFlow parameters before\n    // invoking this function\n    // :returns: Table\n    ReturnEntity =\n        (pEntity as text) =>\n            let\n                Source = PowerBI.Dataflows(null),\n                UpperCaseWorkspace =\n                    Table.TransformColumns(\n                        Source,\n                        {\n                            {\n                                \"workspaceName\",\n                                each Text.Upper(Text.From(_)),\n                                type nullable text\n                            }\n                        }\n                    ),\n                Workspace = UpperCaseWorkspace{[workspaceName = Text.Upper(pWorkSpace)]}[Data],\n                UpperCaseDataflow =\n                    Table.TransformColumns(\n                        Workspace,\n                        {\n                            {\n                                \"dataflowName\",\n                                each Text.Upper(Text.From(_)),\n                                type nullable text\n                            }\n                        }\n                    ),\n                Dataflow = UpperCaseDataflow{[dataflowName = Text.Upper(pDataFlow)]}[Data],\n                UpperCaseEntity =\n                    Table.TransformColumns(\n                        Dataflow,\n                        {\n                            {\n                                \"entity\",\n                                each Text.Upper(Text.From(_)),\n                                type nullable text\n                            }\n                        }\n                    ),\n                Entity = UpperCaseEntity{[entity = Text.Upper(pEntity)]}[Data]\n            in\n                Entity\nin\n    ReturnEntity;\r\nshared GetEntityFromWorkspace = let\n    // This function retrieves a table (Entity) for the give\n    // workspaceName and dataflowName which are variables\n    // invoked in this function\n    // :returns: Table\n    ReturnEntity =\n        (pWorkSpace as text, pDataFlow as text, pEntity as text) =>\n            let\n                Source = PowerBI.Dataflows(null),\n                UpperCaseWorkspace =\n                    Table.TransformColumns(\n                        Source,\n                        {\n                            {\n                                \"workspaceName\",\n                                each Text.Upper(Text.From(_)),\n                                type nullable text\n                            }\n                        }\n                    ),\n                Workspace = UpperCaseWorkspace{[workspaceName = Text.Upper(pWorkSpace)]}[Data],\n                UpperCaseDataflow =\n                    Table.TransformColumns(\n                        Workspace,\n                        {\n                            {\n                                \"dataflowName\",\n                                each Text.Upper(Text.From(_)),\n                                type nullable text\n                            }\n                        }\n                    ),\n                Dataflow = UpperCaseDataflow{[dataflowName = Text.Upper(pDataFlow)]}[Data],\n                UpperCaseEntity =\n                    Table.TransformColumns(\n                        Dataflow,\n                        {\n                            {\n                                \"entity\",\n                                each Text.Upper(Text.From(_)),\n                                type nullable text\n                            }\n                        }\n                    ),\n                Entity = UpperCaseEntity{[entity = Text.Upper(pEntity)]}[Data]\n            in\n                Entity\nin\n    ReturnEntity;\r\nshared pWorkSpace = \"COHR_DATAFLOWS\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pDataFlow = \"FIN_COMMON\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pFiscalCalendarDateFilter = 3 meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type number];\r\n[Description = \"Use this parameter to set values to Return Max No. of Rows#(lf)Set this value to 0 to disable\"]\r\nshared pSetMaxRows = 0 meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type number];\r\nshared pOrganizationOrgs = \"BCO\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pTBU = \"DPSS_Germany\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pServerName = \"mma12090.snowflakecomputing.com\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pWarehouse = \"COMPUTE_REPORTING\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pRole = \"GLBMFGOPERATIONSROLE\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pDatabase = \"PROD_DB\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pTextColumns = \"ENTITY,DEPT,ACCT,PROJ,HFM_PRODUCT,ALT_HFM_PRODUCT,M20_TBU,M20_PFC,INTERCO,ACCOUNT_DESC,GL_PERIOD,ITEM_ORG_ID_KEY,ITEM_ORG_CODE_KEY,ITEM_NUMBER,ITEM_TBU,ITEM_PRODUCT_FAMILY,SOURCE_TYPE,SUBINVENTORY_CODE,SUBINVENTORY_TYPE,ORGANIZATION_CODE,CURRENCY_CODE,VALID_FLAG,COMMENTS,FISCAL_WEEK,JE_SOURCE_CATEGORY,OPERATIONS_REPORTING,CS_DEMAND_SOURCE,CS_SUPPLY_SOURCE,ITEM_TYPE_CODE,EXCLUDE_FLAG,EXCLUDE_COMMENT,WIP_CLASS,ITEM_TYPE,PLANNER_CODE,MAKE_BUY,ITEM_STATUS,ABC_CLASS,INV_STATUS,ITEM_PRODUCT_LINE,ITEM_FORECAST_FIELD,ITEM_DESC,WIP_JOB_NO,ORA_PRODUCT_LINE,FIN_PRODUCT_LINE,ORA_FORECAST_FIELD,ORG_TBU,ORG_PRODUCT_FAMILY,ORG_PRODUCT_LINE,ORG_FORECAST_FIELD,PRODUCT_MAP_KEY,FIN_TBU,FIN_PFC,FISCAL_QUARTER,FISCAL_YEAR,MGT_PRODUCT_GROUP,MGT_SUB_PRODUCT_GROUP,BUSINESS_SEGMENT,ACCOUNT_NAME,ACCOUNT_DESC,ACCOUNT_TYPE,ACCOUNT_SUB_GROUP,ACCOUNT_GROUP,SUMMARY_ACCOUNT,INVVALUE_KEY#(cr)#(lf)\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pNumberColumns = \"TRAN_QTY,ACCOUNTED_DR,ACCOUNTED_CR,NET_ACCOUNTED_AMT,ACCOUNTED_NET_USD,INV_VALUE,INV_VALUE_USD,CURRENCY_RATE,ITEM_COST,MATERIAL_COST,MATERIAL_OVERHEAD_COST,OUTSIDE_PROCESSING_COST,OVERHEAD_COST,RESOURCE_COST,TOTAL_COST\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pDateColumns = \"TRANS_DATE,WEEK_START_DATE,WEEK_END_DATE,PERIOD_START_DATE,PERIOD_END_DATE,QUARTER_START_DATE,QUARTER_END_DATE\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared pSchema = \"APPS\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared ListOfOrgs = let\r\n  Source = pOrganizationOrgs,\r\n  GetListOfValues = Text.Split(Source, \",\"),\r\n  #\"Convert to table\" = Table.FromValue(GetListOfValues),\r\n  #\"Transform columns\" = Table.TransformColumnTypes(#\"Convert to table\", {{\"Value\", type text}}),\r\n  #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"Value\", null}})\r\nin\r\n  #\"Replace errors\";\r\n[Description = \"Coherent Fiscal Calendar.#(lf)Currently filtered to > 29th Sept. 2019\"]\r\nshared #\"DIM_Fiscal Calendar\" = let\n    /*\nDIM_Fiscal Calendar is a modified view of the Fiscal Calendar where\n\nA date filter has been applied so that only dates after pFiscalCalendarDateFilter are included\nAdditional columns have been added Cal_Year_ofCW, Cal_Year_ofCW_Short\n*/\n    FiscalCalendarData = GetEntity(\"Fiscal Calendar Days\"),\n    TransformColumnTypes =\n        Table.TransformColumnTypes(\n            FiscalCalendarData,\n            {\n                {\n                    \"Calendar Day\",\n                    type date\n                },\n                {\n                    \"Week Start Date\",\n                    type date\n                },\n                {\n                    \"Week End Date\",\n                    type date\n                },\n                {\n                    \"Period Start Date\",\n                    type date\n                },\n                {\n                    \"Period End Date\",\n                    type date\n                },\n                {\n                    \"Quarter Start Date\",\n                    type date\n                },\n                {\n                    \"Quarter End Date\",\n                    type date\n                },\n                {\n                    \"Year Start Date\",\n                    type date\n                },\n                {\n                    \"Year End Date\",\n                    type date\n                },\n                {\n                    \"Fiscal Week No\",\n                    Int64.Type\n                },\n                {\n                    \"Fiscal Month Week No\",\n                    Int64.Type\n                },\n                {\n                    \"Fiscal Qtr Week No\",\n                    Int64.Type\n                },\n                {\n                    \"Period Year\",\n                    Int64.Type\n                },\n                {\n                    \"Quarter No\",\n                    Int64.Type\n                },\n                {\n                    \"Period No\",\n                    Int64.Type\n                },\n                {\n                    \"Fiscal Day\",\n                    Int64.Type\n                },\n                {\n                    \"FC_PERIOD_ID\",\n                    Int64.Type\n                },\n                {\n                    \"FC_QUARTER_ID\",\n                    Int64.Type\n                },\n                {\n                    \"FC_WEEK_ID\",\n                    Int64.Type\n                },\n                {\n                    \"FC_YEAR_OFFSET\",\n                    Int64.Type\n                },\n                {\n                    \"FC_QUARTER_OFFSET\",\n                    Int64.Type\n                },\n                {\n                    \"FC_PERIOD_OFFSET\",\n                    Int64.Type\n                },\n                {\n                    \"FC_WEEK_OFFSET\",\n                    Int64.Type\n                },\n                {\n                    \"FC_DAYS_OFFSET\",\n                    Int64.Type\n                },\n                {\n                    \"CALENDAR_YEAR\",\n                    Int64.Type\n                },\n                {\n                    \"CALENDAR_MONTH\",\n                    Int64.Type\n                },\n                {\n                    \"CALENDAR_ISO_WEEK\",\n                    Int64.Type\n                },\n                {\n                    \"CALENDAR_US_WEEK\",\n                    Int64.Type\n                },\n                {\n                    \"DAY_OF_WEEK\",\n                    Int64.Type\n                },\n                {\n                    \"WORKING_DAY_FLAG\",\n                    Int64.Type\n                },\n                {\n                    \"FISCAL_WEEK_INDICATOR_SORT\",\n                    Int64.Type\n                },\n                {\n                    \"FISCAL_MONTH_INDICATOR_SORT\",\n                    Int64.Type\n                },\n                {\n                    \"FISCAL_QUARTER_INDICATOR_SORT\",\n                    Int64.Type\n                },\n                {\n                    \"FISCAL_YEAR_INDICATOR_SORT\",\n                    Int64.Type\n                }\n            }\n        ),\n    //Gets all dates from the year offset given by pFiscalCalendarDateFilter (default is set as 3 years)\n    SelectAllRowsAfterThisDate =\n        let\n            GetLastNYearsOfData =\n                Table.AddColumn(\n                    TransformColumnTypes,\n                    \"PreviousNYears\",\n                    each\n                        Date.IsInPreviousNYears(\n                            [Calendar Day],\n                            pFiscalCalendarDateFilter\n                        )\n                ),\n            GetCurrentYearsData =\n                Table.AddColumn(\n                    GetLastNYearsOfData,\n                    \"CurrentFutureYears\",\n                    each\n                        [Calendar Day]\n                        >= Date.From(Date.StartOfYear(DateTime.FixedLocalNow()))\n                ),\n            SelectTheFilteredRows =\n                Table.SelectRows(\n                    GetCurrentYearsData,\n                    each\n                        List.AnyTrue(\n                            {\n                                [PreviousNYears],\n                                [CurrentFutureYears]\n                            }\n                        )\n                ),\n            ReturnFinalValue =\n                Table.RemoveColumns(\n                    SelectTheFilteredRows,\n                    {\n                        \"PreviousNYears\",\n                        \"CurrentFutureYears\"\n                    }\n                )\n        in\n            ReturnFinalValue,\n    RenameFiscalWeekColumns =\n        Table.RenameColumns(\n            SelectAllRowsAfterThisDate,\n            {\n                {\n                    \"Fiscal Week\",\n                    \"Fiscal Year Week\"\n                },\n                {\n                    \"Fiscal Year Week\",\n                    \"Fiscal Week\"\n                }\n            }\n        ),\n    AddStartOfWeekCOlumn =\n        Table.AddColumn(\n            RenameFiscalWeekColumns,\n            \"Start of Week\",\n            each Date.StartOfWeek([Calendar Day]),\n            type date\n        ),\n    #\"Inserted Year\" =\n        Table.AddColumn(\n            AddStartOfWeekCOlumn,\n            \"Cal_Year_ofCW\",\n            each Date.Year([Start of Week]),\n            Int64.Type\n        ),\n    GetThe2DigitValueOfYear =\n        Table.AddColumn(\n            #\"Inserted Year\",\n            \"Cal_Year_ofCW_Short\",\n            each Text.End(Text.From([Cal_Year_ofCW]), 2),\n            type number\n        ),\n    /*\n    Returns a column with the Year and CW combined and prefixes included\n    eg. Year = 2022 and CW = 26 then value returned is \"Y22_CW26\"\n    */\n    SetYearAndCWColumn =\n        let\n            TextCalendarYear =\n                Table.AddColumn(\n                    GetThe2DigitValueOfYear,\n                    \"TextCalendarYear\",\n                    each\n                        \"Y\"\n                        & Text.End(Text.From([Cal_Year_ofCW]), 2),\n                    type number\n                ),\n            TextCalendarISOWeek =\n                Table.AddColumn(\n                    TextCalendarYear,\n                    \"TextCalendarISOWeek\",\n                    each\n                        \"_CW\"\n                        & Text.End(\n                            Text.From([CALENDAR_ISO_WEEK]),\n                            2\n                        ),\n                    type number\n                ),\n            CombineYearAndISOWeek =\n                Table.AddColumn(\n                    TextCalendarISOWeek,\n                    \"CALENDAR_Year_CWiso\",\n                    each\n                        Text.Combine(\n                            {\n                                [TextCalendarYear],\n                                Text.From([TextCalendarISOWeek])\n                            }\n                        ),\n                    type text\n                ),\n            ReturnCalendarYearCWIso =\n                Table.RemoveColumns(\n                    CombineYearAndISOWeek,\n                    {\n                        \"TextCalendarYear\",\n                        \"TextCalendarISOWeek\"\n                    }\n                )\n        in\n            ReturnCalendarYearCWIso,\n    /*\n    Returns a column with the Year x 100 and CW added together\n    eg. Year = 2024 and CW = 26 then value returned is 202426\n    */\n    SetCalYearAndCWIDColumn =\n        let\n            MultiplyCalYearCWBy100 =\n                Table.AddColumn(\n                    SetYearAndCWColumn,\n                    \"Cal_Year_ofCWx100\",\n                    each [Cal_Year_ofCW] * 100,\n                    type number\n                ),\n            AddtheWeekToTheMultipliedValue =\n                Table.AddColumn(\n                    MultiplyCalYearCWBy100,\n                    \"Cal_Year_CWiso_ID\",\n                    each [Cal_Year_ofCWx100] + [CALENDAR_ISO_WEEK],\n                    type number\n                ),\n            TransformTheColumnTypes =\n                Table.TransformColumnTypes(\n                    AddtheWeekToTheMultipliedValue,\n                    {\n                        {\n                            \"Cal_Year_CWiso_ID\",\n                            Int64.Type\n                        },\n                        {\n                            \"Cal_Year_ofCWx100\",\n                            Int64.Type\n                        },\n                        {\n                            \"Cal_Year_ofCW_Short\",\n                            Int64.Type\n                        }\n                    }\n                ),\n            ReturnCalYearId =\n                Table.RemoveColumns(\n                    TransformTheColumnTypes,\n                    {\"Cal_Year_ofCWx100\"}\n                )\n        in\n            ReturnCalYearId,\n    AddPrefixToCalendarISOWeek =\n        Table.AddColumn(\n            SetCalYearAndCWIDColumn,\n            \"Cal_CW\",\n            each \"CW\" & Text.From([CALENDAR_ISO_WEEK]),\n            type text\n        ),\n    KeepColumns =\n        Table.SelectColumns(\n            AddPrefixToCalendarISOWeek,\n            {\n                \"Period Set Name\",\n                \"Calendar Day\",\n                \"Fiscal Year Week\",\n                \"Fiscal Week\",\n                \"FISCAL_WEEK_DISP\",\n                \"FISCAL_MONTH_SORT_VALUE\",\n                \"FISCAL_QUARTER_DISP\",\n                \"Fiscal Week No\",\n                \"Fiscal Month Week No\",\n                \"FISCAL_QTR_WEEK\",\n                \"Fiscal Qtr Week No\",\n                \"GL Period\",\n                \"PQ_LAST_GL_PERIOD\",\n                \"Period Year\",\n                \"Fiscal Year\",\n                \"Quarter No\",\n                \"Fiscal Quarter\",\n                \"Fiscal Year Quarter\",\n                \"PRIOR_FYFQ\",\n                \"PERIOD_NAME\",\n                \"Period No\",\n                \"Fiscal Day\",\n                \"Week Start Date\",\n                \"Week End Date\",\n                \"Period Start Date\",\n                \"Period End Date\",\n                \"Quarter Start Date\",\n                \"Quarter End Date\",\n                \"Year Start Date\",\n                \"Year End Date\",\n                \"Fiscal Period Month\",\n                \"FC_PERIOD_ID\",\n                \"FC_QUARTER_ID\",\n                \"FC_WEEK_ID\",\n                \"FC_YEAR_OFFSET\",\n                \"FC_QUARTER_OFFSET\",\n                \"FC_PERIOD_OFFSET\",\n                \"FC_WEEK_OFFSET\",\n                \"FC_DAYS_OFFSET\",\n                \"FC_HALF\",\n                \"Next Quarter First Fiscal Week\",\n                \"Prior Qtr Last Fiscal Week\",\n                \"CALENDAR_YEAR\",\n                \"CALENDAR_MONTH\",\n                \"CALENDAR_YEARMONTHID\",\n                \"CALENDAR_MONTHNAME\",\n                \"CALENDAR_MONTHNAMESHORT\",\n                \"CALENDAR_ISO_WEEK\",\n                \"CALENDAR_US_WEEK\",\n                \"CALENDAR_YEAR_SHORT\",\n                \"CALENDAR_MTH_YEAR\",\n                \"DAY_NAME\",\n                \"DAY_OF_WEEK\",\n                \"WORKING_DAY_FLAG\",\n                \"CQ_LAST_FISCAL_WEEK\",\n                \"Row Creation Date\",\n                \"Week End Flag\",\n                \"Month End Flag\",\n                \"Quarter End Flag\",\n                \"Year End Flag\",\n                \"FISCAL_WEEK_INDICATOR\",\n                \"FISCAL_WEEK_INDICATOR_SORT\",\n                \"FISCAL_MONTH_INDICATOR\",\n                \"FISCAL_MONTH_INDICATOR_SORT\",\n                \"FISCAL_QUARTER_INDICATOR\",\n                \"FISCAL_QUARTER_INDICATOR_SORT\",\n                \"FISCAL_YEAR_INDICATOR\",\n                \"FISCAL_YEAR_INDICATOR_SORT\",\n                \"Refresh Date\",\n                \"Start of Week\",\n                \"Cal_Year_ofCW\",\n                \"Cal_Year_ofCW_Short\",\n                \"CALENDAR_Year_CWiso\",\n                \"Cal_Year_CWiso_ID\",\n                \"Cal_CW\"\n            }\n        )\nin\n    KeepColumns;\r\nshared DIM_FiscalCalendar_COHR = let\r\n  Source = SnowflakeTableFromApps(\"XX_FISCAL_DAYS_COHR_TAB\")\r\nin\r\n  Source;\r\nshared DIM_FiscalCalendar_IIVI = let\r\n  Source = SnowflakeTableFromApps(\"XX_FISCAL_DAYS_IIVI_TAB\")\r\nin\r\n  Source;\r\nshared #\"Version History Dataflow\" = let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"NY0xD4IwFAb/ypfOQApRB1eNiZs7YXiWh75Y2qZ9hL8vGh3vhru+N21jG2sq09muq+2+bg9od0f7UafoJeDG5KJ7bXwNokIeykVxJqXJxxUuMymPWEWfuJBTKN09lwqjzByKxPAzoDAiUaaZlXNBYa2XhCnmb1LCA2nJKRYu2+0/MMPwBg==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\"Version Number\" = _t, #\"Revision Date/Time\" = _t, #\"Developer Name\" = _t, #\"Revision Notes\" = _t, #\"Revision Type\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Version Number\", type text}, {\"Revision Date/Time\", type datetime}, {\"Developer Name\", type text}, {\"Revision Notes\", type text}, {\"Revision Type\", type text}})\nin\n    #\"Changed Type\";\r\nshared INFO_DataUpdateInfoInventoryVelocity = let\n  Entity = GetEntityFromWorkspace(\"COHR_Dataflows\", \"INV_VELOCITY\", \"Data Update Info\")\nin\n  Entity;\r\nshared GetColumnNames = let\n    // This function filters a table (Entity) by the first\n    // N rows pass FilterValue to set number of rows to \n    // return\n    // :returns: Table\n    ColumnNames =\n        (Entity as table) =>\n            let\n                GetColumnNames = Table.ColumnNames(Entity),\n                ConvertToTable =\n                    Table.FromList(\n                        GetColumnNames,\n                        Splitter.SplitByNothing(),\n                        null,\n                        null,\n                        ExtraValues.Error\n                    ),\n                SetColumnName =\n                    Table.RenameColumns(\n                        ConvertToTable,\n                        {\n                            {\n                                \"Column1\",\n                                \"ColumnNames\"\n                            }\n                        }\n                    ),\n                String =\n                    List.Accumulate(\n                        Table.ToList(SetColumnName),\n                        \"\",\n                        (state, current) =>\n                            if state = \"\" then\n                                current\n                            else\n                                state & \",\" & current\n                    )\n            in\n                String\nin\n    ColumnNames;\r\nshared SetColumnType = let\n    // This function filters a table (Entity) by the first\n    // N rows pass FilterValue to set number of rows to \n    // return\n    // :returns: Table\n    TransformDTypes =\n        (Entity as table, ColumnNames as text, dtype as text) =>\n            let\n                CleanList =\n                    List.Transform(\n                        List.Transform(\n                            Text.Split(ColumnNames, \",\"),\n                            Text.Trim\n                        ),\n                        Text.Upper\n                    ),\n                ColumnList =\n                    List.Select(\n                        Table.ColumnNames(Entity),\n                        each List.Contains(CleanList, Text.Upper(_))\n                    ),\n                // TransformDType = FilterMaxNoOfRows, each {{\"KANBAN_ITEM\", Int64.Type}, {\"MIN_MAX_ITEM\", Int64.Type}, {\"OPEN_BLANKETS\", Int64.Type}}),\n                TransformTypes =\n                    if List.IsEmpty(CleanList) then\n                        Entity\n                    else\n                        Table.TransformColumnTypes(\n                            Entity,\n                            List.Transform(\n                                List.Intersect(\n                                    {\n                                        Table.ColumnNames(Entity),\n                                        ColumnList\n                                    }\n                                ),\n                                if dtype = \"text\" then\n                                    each\n                                        {\n                                            _,\n                                            type text\n                                        }\n                                else if dtype = \"number\" then\n                                    each\n                                        {\n                                            _,\n                                            type number\n                                        }\n                                else if dtype = \"date\" then\n                                    each\n                                        {\n                                            _,\n                                            type date\n                                        }\n                                else if dtype = \"time\" then\n                                    each\n                                        {\n                                            _,\n                                            type time\n                                        }\n                                else if dtype = \"datetime\" then\n                                    each\n                                        {\n                                            _,\n                                            type datetime\n                                        }\n                                else if dtype = \"whole\" then\n                                    each\n                                        {\n                                            _,\n                                            Int64.Type\n                                        }\n                                else\n                                    each\n                                        {\n                                            _,\n                                            type text\n                                        }\n                            // default\n                            )\n                        )\n            //TransformTypes = Entity\n            in\n                TransformTypes\nin\n    TransformDTypes;\r\nshared RenameColumn = let\n    // This function filters a table (Entity) by the first\n    // N rows pass FilterValue to set number of rows to\n    // return\n    // :returns: Table\n    RenameType = type function (Entity as\n        (\n            type table\n            meta\n            [\n                Documentation.FieldCaption = \"Choose a table\",\n                Documentation.FieldDescription = \"Select a table to filter from the list\",\n                // Documentation.AllowedValues = Table.Schema,\n                Formatting.IsMultiLine = false,\n                Formatting.IsCode = false\n            ]\n        ), OldColumnName as\n        (\n            type text\n            meta\n            [\n                Documentation.FieldCaption = \"Enter the name of the existing column name\",\n                Documentation.FieldDescription = \"This column name will be changed to `NewColumnName`\",\n                // Documentation.AllowedValues = Table.ColumnNames(Entity),\n                Formatting.IsMultiLine = false,\n                Formatting.IsCode = false\n            ]\n        ), NewColumnName as\n        (\n            type text\n            meta\n            [\n                Documentation.FieldCaption = \"Enter the name of the new column name\",\n                Documentation.FieldDescription = \"This column name will be used to change `OldColumName`\",\n                Formatting.IsMultiLine = false,\n                Formatting.IsCode = false\n            ]\n        )) as table,\n    fxRenameColumns =\n        (Entity as table, OldColumnName as text, NewColumnName as text) =>\n            let\n                ModifiedEntity =\n                    if\n                        List.Contains(\n                            Table.ColumnNames(Entity),\n                            OldColumnName\n                        )\n                    then\n                        Table.RenameColumns(\n                            Entity,\n                            {\n                                {\n                                    OldColumnName,\n                                    NewColumnName\n                                }\n                            }\n                        )\n                    else\n                        Entity\n            in\n                ModifiedEntity,\n    ReplaceTypes =\n        Value.ReplaceType(\n            fxRenameColumns,\n            RenameType\n        )\nin\n    ReplaceTypes;\r\nshared FilterRowsbyDate = let\n    // This function filters a table (Entity) by the first\n    // N rows pass FilterValue to set number of rows to \n    // return\n    // :returns: Table\n    FilterColumn =\n        (Entity as table, ColumnName as text, MinDate as date, optional MaxDate as date) =>\n            let\n                Filter =\n                    if ColumnName = \"\" then\n                        Entity\n                    else\n                        Table.SelectRows(\n                            Entity,\n                            if MaxDate is null then\n                                each Record.Field(_, ColumnName) >= MinDate\n                            else\n                                each\n                                    Record.Field(_, ColumnName)\n                                    >= MinDate and Record.Field(_, ColumnName)\n                                    <= MaxDate\n                        )\n            in\n                Filter\nin\n    FilterColumn;\r\nshared SplitDateTimeColumn = let\n    // This function filters a table (Entity) by the first\n    // N rows pass FilterValue to set number of rows to \n    // return\n    // :returns: Table\n    DataTimeColumns =\n        (Entity as table, ColumnNameDate as text) =>\n            let\n                ModifyColumns =\n                    (Entity as table, ColumnNameDate as text) =>\n                        let\n                            ColumnNameTime =\n                                Text.Replace(\n                                    ColumnNameDate,\n                                    \"DATE\",\n                                    \"TIME\"\n                                ),\n                            TimeColumn =\n                                Table.DuplicateColumn(\n                                    Entity,\n                                    ColumnNameDate,\n                                    ColumnNameTime\n                                ),\n                            SetFmtToTime =\n                                Table.TransformColumns(\n                                    TimeColumn,\n                                    {\n                                        {\n                                            ColumnNameTime,\n                                            DateTime.Time,\n                                            type time\n                                        }\n                                    }\n                                ),\n                            SetFmtToDate =\n                                Table.TransformColumns(\n                                    SetFmtToTime,\n                                    {\n                                        {\n                                            ColumnNameDate,\n                                            DateTime.Date,\n                                            type date\n                                        }\n                                    }\n                                )\n                        in\n                            SetFmtToDate,\n                SetFmtToDate =\n                    if not List.Contains(\n                        Table.ColumnNames(Entity),\n                        ColumnNameDate\n                    ) then\n                        Entity\n                    else\n                        ModifyColumns(Entity, ColumnNameDate)\n            in\n                SetFmtToDate\nin\n    DataTimeColumns;\r\nshared CreateKeyField = let\n    /*\n    Creates a Key Field by passing in a list of column names\n    KeyFieldName is the name of the field generated by combining the list\n    Separator is the separator to use to combine the key field values\n\n    Still to do - add some error trapping\n    */\n    fxKeyFields =\n        (Entity as table, ColumnNames as text, KeyFieldName as text, optional Separator as text) =>\n            let\n                CleanList =\n                    List.Transform(\n                        List.Transform(\n                            Text.Split(ColumnNames, \",\"),\n                            Text.Trim\n                        ),\n                        Text.Upper\n                    ),\n                ColumnList =\n                    List.Select(\n                        Table.ColumnNames(Entity),\n                        each List.Contains(CleanList, Text.Upper(_))\n                    ),\n                CreateKeyField =\n                    Table.AddColumn(\n                        Entity,\n                        KeyFieldName,\n                        each\n                            List.Select(\n                                Record.ToList(Record.SelectFields(_, ColumnList)),\n                                each _ <> null\n                            )\n                    ),\n                Result =\n                    Table.TransformColumns(\n                        CreateKeyField,\n                        {\n                            KeyFieldName,\n                            each\n                                Text.Combine(\n                                    List.Transform(_, Text.From),\n                                    if Separator is null then\n                                        \"_\"\n                                    else\n                                        Separator\n                                ),\n                            type text\n                        }\n                    )\n            in\n                Result\nin\n    fxKeyFields;\r\nshared SortColumnNames = let\n    // This function filters a table (Entity) by the first\n    // N rows pass FilterValue to set number of rows to \n    // return\n    // :returns: Table\n    ColumnNames = (Entity as table) => let\n        GetColumnNames = Table.ColumnNames(Entity),\n        ConvertToTable = Table.FromList(GetColumnNames, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n        SetColumnName = Table.RenameColumns(ConvertToTable,{{\"Column1\", \"ColumnNames\"}}),\n        SortedColumns = List.Sort(Table.ToList(SetColumnName)),\n        SortedTableColumns = Table.ReorderColumns(Entity, SortedColumns)\n    in\n        SortedTableColumns\nin\n    ColumnNames;\r\n"},"annotations":[{"name":"pbi:QueryGroups","value":"[{\"id\":\"7363d107-1f3d-48de-be9c-f033354d282e\",\"name\":\"Functions\",\"description\":null,\"parentId\":null,\"order\":0},{\"id\":\"5bac1fbe-fe1d-4da2-94f5-070ea55ef66f\",\"name\":\"Parameters\",\"description\":\"\",\"parentId\":null,\"order\":2},{\"id\":\"bbd6ee21-6a56-4a8c-b80f-2aad18bde5a6\",\"name\":\"Facts - Inventory Turns\",\"description\":\"\",\"parentId\":null,\"order\":3},{\"id\":\"a0966e5b-d860-4160-b742-7c26403daafe\",\"name\":\"Dimensions\",\"description\":\"\",\"parentId\":null,\"order\":6},{\"id\":\"a91191ed-8efb-400b-bad7-2b8a42e2d413\",\"name\":\"Versioning\",\"description\":\"\",\"parentId\":null,\"order\":7},{\"id\":\"350542b3-0fe5-4a8f-9abf-594bb26638d7\",\"name\":\"Facts - Inventory Velocity\",\"description\":\"\",\"parentId\":null,\"order\":5},{\"id\":\"d535d7f0-f50c-47a1-a1c5-b52444b9ad0e\",\"name\":\"Information\",\"description\":\"Data Update Information for the Inventory Velocity Tables\",\"parentId\":null,\"order\":1},{\"id\":\"3bf06ac6-8391-4aaa-8026-8f5c38734659\",\"name\":\"Facts - Other\",\"description\":\"\",\"parentId\":null,\"order\":4}]"}],"entities":[{"$type":"LocalEntity","name":"DIM_Time Balance Week","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"DIM_Time%20Balance%20Week.csv"},"attributes":[{"name":"FISCAL_PERIOD_KEY","dataType":"string"},{"name":"FISCAL_DIM_ID","dataType":"double"},{"name":"FISCAL_DIM","dataType":"string"},{"name":"FISCAL_DIM_VALUE","dataType":"string"},{"name":"FISCAL_DIM_SORT_VALUE","dataType":"string"},{"name":"FC_YEAR_OFFSET","dataType":"double"},{"name":"FC_QUARTER_OFFSET","dataType":"double"},{"name":"FISCAL_YEAR","dataType":"string"},{"name":"FYFQ","dataType":"string"},{"name":"PERIOD_YEAR","dataType":"double"},{"name":"GL_PERIOD","dataType":"string"},{"name":"FISCAL_WEEK_ID","dataType":"double"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2022-07-05T12:11:24.6307933+00:00","location":"https://wabiwuscpcdsa.blob.core.windows.net:443/d2e244ba-56a2-442b-a811-b138912f586a/DIM_Time%20Balance%20Week.csv?snapshot=2022-07-05T12%3A11%3A24.6055550Z"}]},{"$type":"LocalEntity","name":"DIM_Calendar","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"DIM_Calendar.csv"},"attributes":[{"name":"Period Set Name","dataType":"string"},{"name":"Calendar Day","dataType":"dateTime"},{"name":"Fiscal Week","dataType":"string"},{"name":"Fiscal Year Week","dataType":"string"},{"name":"FISCAL_WEEK_DISP","dataType":"string"},{"name":"FISCAL_MONTH_SORT_VALUE","dataType":"string"},{"name":"FISCAL_QUARTER_DISP","dataType":"string"},{"name":"Fiscal Week No","dataType":"double"},{"name":"Fiscal Month Week No","dataType":"double"},{"name":"FISCAL_QTR_WEEK","dataType":"string"},{"name":"Fiscal Qtr Week No","dataType":"double"},{"name":"GL Period","dataType":"string"},{"name":"PQ_LAST_GL_PERIOD","dataType":"string"},{"name":"Period Year","dataType":"double"},{"name":"Fiscal Year","dataType":"string"},{"name":"Quarter No","dataType":"double"},{"name":"Fiscal Quarter","dataType":"string"},{"name":"Fiscal Year Quarter","dataType":"string"},{"name":"PRIOR_FYFQ","dataType":"string"},{"name":"PERIOD_NAME","dataType":"string"},{"name":"Period No","dataType":"double"},{"name":"Fiscal Day","dataType":"double"},{"name":"Week Start Date","dataType":"date"},{"name":"Week End Date","dataType":"date"},{"name":"Period Start Date","dataType":"dateTime"},{"name":"Period End Date","dataType":"dateTime"},{"name":"Quarter Start Date","dataType":"dateTime"},{"name":"Quarter End Date","dataType":"dateTime"},{"name":"Year Start Date","dataType":"dateTime"},{"name":"Year End Date","dataType":"dateTime"},{"name":"Fiscal Period Month","dataType":"string"},{"name":"FC_PERIOD_ID","dataType":"double"},{"name":"FC_QUARTER_ID","dataType":"double"},{"name":"FC_WEEK_ID","dataType":"double"},{"name":"FC_YEAR_OFFSET","dataType":"double"},{"name":"FC_QUARTER_OFFSET","dataType":"double"},{"name":"FC_PERIOD_OFFSET","dataType":"double"},{"name":"FC_WEEK_OFFSET","dataType":"double"},{"name":"FC_DAYS_OFFSET","dataType":"double"},{"name":"FC_HALF","dataType":"string"},{"name":"Next Quarter First Fiscal Week","dataType":"string"},{"name":"Prior Qtr Last Fiscal Week","dataType":"string"},{"name":"CALENDAR_YEAR","dataType":"double"},{"name":"CALENDAR_MONTH","dataType":"double"},{"name":"CALENDAR_YEARMONTHID","dataType":"string"},{"name":"CALENDAR_MONTHNAME","dataType":"string"},{"name":"CALENDAR_MONTHNAMESHORT","dataType":"string"},{"name":"CALENDAR_ISO_WEEK","dataType":"double"},{"name":"CALENDAR_US_WEEK","dataType":"double"},{"name":"CALENDAR_YEAR_SHORT","dataType":"string"},{"name":"CALENDAR_MTH_YEAR","dataType":"string"},{"name":"DAY_NAME","dataType":"string"},{"name":"DAY_OF_WEEK","dataType":"double"},{"name":"WORKING_DAY_FLAG","dataType":"double"},{"name":"CQ_LAST_FISCAL_WEEK","dataType":"string"},{"name":"Row Creation Date","dataType":"date"},{"name":"Week End Flag","dataType":"string"},{"name":"Month End Flag","dataType":"string"},{"name":"Quarter End Flag","dataType":"string"},{"name":"Year End Flag","dataType":"string"},{"name":"FISCAL_WEEK_INDICATOR","dataType":"string"},{"name":"FISCAL_WEEK_INDICATOR_SORT","dataType":"double"},{"name":"FISCAL_MONTH_INDICATOR","dataType":"string"},{"name":"FISCAL_MONTH_INDICATOR_SORT","dataType":"double"},{"name":"FISCAL_QUARTER_INDICATOR","dataType":"string"},{"name":"FISCAL_QUARTER_INDICATOR_SORT","dataType":"double"},{"name":"FISCAL_YEAR_INDICATOR","dataType":"string"},{"name":"FISCAL_YEAR_INDICATOR_SORT","dataType":"double"},{"name":"Refresh Date","dataType":"dateTime"}]},{"$type":"LocalEntity","name":"DIM_Fiscal Context","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"DIM_Fiscal%20Context.csv"},"attributes":[{"name":"PERIOD_SET_NAME","dataType":"string"},{"name":"CAL_DAY","dataType":"dateTime"},{"name":"FISCAL_WEEK","dataType":"string"},{"name":"FISCAL_YEAR_WEEK","dataType":"string"},{"name":"FISCAL_WEEK_DISP","dataType":"string"},{"name":"FISCAL_MONTH_SORT_VALUE","dataType":"string"},{"name":"FISCAL_QUARTER_DISP","dataType":"string"},{"name":"FISCAL_WEEK_NO","dataType":"double"},{"name":"FISCAL_MONTH_WEEK_NO","dataType":"double"},{"name":"FISCAL_QTR_WEEK","dataType":"string"},{"name":"FISCAL_QTR_WEEK_NO","dataType":"double"},{"name":"GL_PERIOD","dataType":"string"},{"name":"PQ_LAST_GL_PERIOD","dataType":"string"},{"name":"PERIOD_YEAR","dataType":"double"},{"name":"FISCAL_YEAR","dataType":"string"},{"name":"QUARTER_NUM","dataType":"double"},{"name":"FISCAL_QUARTER","dataType":"string"},{"name":"FYFQ","dataType":"string"},{"name":"PRIOR_FYFQ","dataType":"string"},{"name":"PERIOD_NAME","dataType":"string"},{"name":"PERIOD_NUM","dataType":"double"},{"name":"FISCAL_DAY","dataType":"double"},{"name":"WEEK_START_DATE","dataType":"dateTime"},{"name":"WEEK_END_DATE","dataType":"dateTime"},{"name":"PERIOD_START_DATE","dataType":"dateTime"},{"name":"PERIOD_END_DATE","dataType":"dateTime"},{"name":"QUARTER_START_DATE","dataType":"dateTime"},{"name":"QUARTER_END_DATE","dataType":"dateTime"},{"name":"YEAR_START_DATE","dataType":"dateTime"},{"name":"YEAR_END_DATE","dataType":"dateTime"},{"name":"PERIOD_MONTH","dataType":"string"},{"name":"FC_PERIOD_ID","dataType":"double"},{"name":"FC_QUARTER_ID","dataType":"double"},{"name":"FC_WEEK_ID","dataType":"double"},{"name":"FC_YEAR_OFFSET","dataType":"double"},{"name":"FC_QUARTER_OFFSET","dataType":"double"},{"name":"FC_PERIOD_OFFSET","dataType":"double"},{"name":"FC_WEEK_OFFSET","dataType":"double"},{"name":"FC_DAYS_OFFSET","dataType":"double"},{"name":"FC_HALF","dataType":"string"},{"name":"NQ_FIRST_FISCAL_WEEK","dataType":"string"},{"name":"PQ_LAST_FISCAL_WEEK","dataType":"string"},{"name":"CALENDAR_YEAR","dataType":"double"},{"name":"CALENDAR_MONTH","dataType":"double"},{"name":"CALENDAR_YEARMONTHID","dataType":"string"},{"name":"CALENDAR_MONTHNAME","dataType":"string"},{"name":"CALENDAR_MONTHNAMESHORT","dataType":"string"},{"name":"CALENDAR_ISO_WEEK","dataType":"double"},{"name":"CALENDAR_US_WEEK","dataType":"double"},{"name":"CALENDAR_YEAR_SHORT","dataType":"string"},{"name":"CALENDAR_MTH_YEAR","dataType":"string"},{"name":"DAY_NAME","dataType":"string"},{"name":"DAY_OF_WEEK","dataType":"double"},{"name":"WORKING_DAY_FLAG","dataType":"double"},{"name":"CQ_LAST_FISCAL_WEEK","dataType":"string"},{"name":"ROW_CREATION_DATE","dataType":"date"},{"name":"WEEK_END_FLAG","dataType":"string"},{"name":"MONTH_END_FLAG","dataType":"string"},{"name":"QUARTER_END_FLAG","dataType":"string"},{"name":"YEAR_END_FLAG","dataType":"string"},{"name":"FISCAL_WEEK_INDICATOR","dataType":"string"},{"name":"FISCAL_WEEK_INDICATOR_SORT","dataType":"double"},{"name":"FISCAL_MONTH_INDICATOR","dataType":"string"},{"name":"FISCAL_MONTH_INDICATOR_SORT","dataType":"double"},{"name":"FISCAL_QUARTER_INDICATOR","dataType":"string"},{"name":"FISCAL_QUARTER_INDICATOR_SORT","dataType":"double"},{"name":"FISCAL_YEAR_INDICATOR","dataType":"string"},{"name":"FISCAL_YEAR_INDICATOR_SORT","dataType":"double"},{"name":"EXTRACT_DATE","dataType":"dateTime"},{"name":"CONTEXT","dataType":"string"},{"name":"DATA_UPDATE_DESC","dataType":"string"},{"name":"CONTEXT_FYWK","dataType":"string"},{"name":"CONTEXT_PERIOD","dataType":"string"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2022-07-05T12:11:20.7617726+00:00","location":"https://wabiwuscpcdsa.blob.core.windows.net:443/d2e244ba-56a2-442b-a811-b138912f586a/DIM_Fiscal%20Context.csv?snapshot=2022-07-05T12%3A11%3A20.7427449Z"}]},{"$type":"LocalEntity","name":"ListOfOrgs","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"ListOfOrgs.csv"},"attributes":[{"name":"Value","dataType":"string"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2022-07-05T12:11:08.9774574+00:00","location":"https://wabiwuscpcdsa.blob.core.windows.net:443/d2e244ba-56a2-442b-a811-b138912f586a/ListOfOrgs.csv?snapshot=2022-07-05T12%3A11%3A08.9374386Z"}]},{"$type":"LocalEntity","name":"DIM_Fiscal Calendar","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"DIM_Fiscal%20Calendar.csv"},"attributes":[{"name":"Period Set Name","dataType":"string"},{"name":"Calendar Day","dataType":"date"},{"name":"Fiscal Year Week","dataType":"string"},{"name":"Fiscal Week","dataType":"string"},{"name":"FISCAL_WEEK_DISP","dataType":"string"},{"name":"FISCAL_MONTH_SORT_VALUE","dataType":"string"},{"name":"FISCAL_QUARTER_DISP","dataType":"string"},{"name":"Fiscal Week No","dataType":"int64"},{"name":"Fiscal Month Week No","dataType":"int64"},{"name":"FISCAL_QTR_WEEK","dataType":"string"},{"name":"Fiscal Qtr Week No","dataType":"int64"},{"name":"GL Period","dataType":"string"},{"name":"PQ_LAST_GL_PERIOD","dataType":"string"},{"name":"Period Year","dataType":"int64"},{"name":"Fiscal Year","dataType":"string"},{"name":"Quarter No","dataType":"int64"},{"name":"Fiscal Quarter","dataType":"string"},{"name":"Fiscal Year Quarter","dataType":"string"},{"name":"PRIOR_FYFQ","dataType":"string"},{"name":"PERIOD_NAME","dataType":"string"},{"name":"Period No","dataType":"int64"},{"name":"Fiscal Day","dataType":"int64"},{"name":"Week Start Date","dataType":"date"},{"name":"Week End Date","dataType":"date"},{"name":"Period Start Date","dataType":"date"},{"name":"Period End Date","dataType":"date"},{"name":"Quarter Start Date","dataType":"date"},{"name":"Quarter End Date","dataType":"date"},{"name":"Year Start Date","dataType":"date"},{"name":"Year End Date","dataType":"date"},{"name":"Fiscal Period Month","dataType":"string"},{"name":"FC_PERIOD_ID","dataType":"int64"},{"name":"FC_QUARTER_ID","dataType":"int64"},{"name":"FC_WEEK_ID","dataType":"int64"},{"name":"FC_YEAR_OFFSET","dataType":"int64"},{"name":"FC_QUARTER_OFFSET","dataType":"int64"},{"name":"FC_PERIOD_OFFSET","dataType":"int64"},{"name":"FC_WEEK_OFFSET","dataType":"int64"},{"name":"FC_DAYS_OFFSET","dataType":"int64"},{"name":"FC_HALF","dataType":"string"},{"name":"Next Quarter First Fiscal Week","dataType":"string"},{"name":"Prior Qtr Last Fiscal Week","dataType":"string"},{"name":"CALENDAR_YEAR","dataType":"int64"},{"name":"CALENDAR_MONTH","dataType":"int64"},{"name":"CALENDAR_YEARMONTHID","dataType":"string"},{"name":"CALENDAR_MONTHNAME","dataType":"string"},{"name":"CALENDAR_MONTHNAMESHORT","dataType":"string"},{"name":"CALENDAR_ISO_WEEK","dataType":"int64"},{"name":"CALENDAR_US_WEEK","dataType":"int64"},{"name":"CALENDAR_YEAR_SHORT","dataType":"string"},{"name":"CALENDAR_MTH_YEAR","dataType":"string"},{"name":"DAY_NAME","dataType":"string"},{"name":"DAY_OF_WEEK","dataType":"int64"},{"name":"WORKING_DAY_FLAG","dataType":"int64"},{"name":"CQ_LAST_FISCAL_WEEK","dataType":"string"},{"name":"Row Creation Date","dataType":"date"},{"name":"Week End Flag","dataType":"string"},{"name":"Month End Flag","dataType":"string"},{"name":"Quarter End Flag","dataType":"string"},{"name":"Year End Flag","dataType":"string"},{"name":"FISCAL_WEEK_INDICATOR","dataType":"string"},{"name":"FISCAL_WEEK_INDICATOR_SORT","dataType":"int64"},{"name":"FISCAL_MONTH_INDICATOR","dataType":"string"},{"name":"FISCAL_MONTH_INDICATOR_SORT","dataType":"int64"},{"name":"FISCAL_QUARTER_INDICATOR","dataType":"string"},{"name":"FISCAL_QUARTER_INDICATOR_SORT","dataType":"int64"},{"name":"FISCAL_YEAR_INDICATOR","dataType":"string"},{"name":"FISCAL_YEAR_INDICATOR_SORT","dataType":"int64"},{"name":"Refresh Date","dataType":"dateTime"},{"name":"Start of Week","dataType":"date"},{"name":"Cal_Year_ofCW","dataType":"int64"},{"name":"Cal_Year_ofCW_Short","dataType":"int64"},{"name":"CALENDAR_Year_CWiso","dataType":"string"},{"name":"Cal_Year_CWiso_ID","dataType":"int64"},{"name":"Cal_CW","dataType":"string"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2022-07-05T12:11:33.8055924+00:00","location":"https://wabiwuscpcdsa.blob.core.windows.net:443/d2e244ba-56a2-442b-a811-b138912f586a/DIM_Fiscal%20Calendar.csv?snapshot=2022-07-05T12%3A11%3A33.7823507Z"}]},{"$type":"LocalEntity","name":"DIM_FiscalCalendar_COHR","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"DIM_FiscalCalendar_COHR.csv"},"attributes":[{"name":"PERIOD_SET_NAME","dataType":"string"},{"name":"CAL_DAY","dataType":"dateTime"},{"name":"FISCAL_WEEK","dataType":"string"},{"name":"FISCAL_YEAR_WEEK","dataType":"string"},{"name":"FISCAL_WEEK_DISP","dataType":"string"},{"name":"FISCAL_MONTH_SORT_VALUE","dataType":"string"},{"name":"FISCAL_QUARTER_DISP","dataType":"string"},{"name":"FISCAL_WEEK_NO","dataType":"double"},{"name":"FISCAL_MONTH_WEEK_NO","dataType":"double"},{"name":"FISCAL_QTR_WEEK","dataType":"string"},{"name":"FISCAL_QTR_WEEK_NO","dataType":"double"},{"name":"GL_PERIOD","dataType":"string"},{"name":"PQ_LAST_GL_PERIOD","dataType":"string"},{"name":"PERIOD_YEAR","dataType":"double"},{"name":"FISCAL_YEAR","dataType":"string"},{"name":"QUARTER_NUM","dataType":"double"},{"name":"FISCAL_QUARTER","dataType":"string"},{"name":"FYFQ","dataType":"string"},{"name":"PRIOR_FYFQ","dataType":"string"},{"name":"PERIOD_NAME","dataType":"string"},{"name":"PERIOD_NUM","dataType":"double"},{"name":"FISCAL_DAY","dataType":"double"},{"name":"WEEK_START_DATE","dataType":"date"},{"name":"WEEK_END_DATE","dataType":"date"},{"name":"PERIOD_START_DATE","dataType":"dateTime"},{"name":"PERIOD_END_DATE","dataType":"dateTime"},{"name":"QUARTER_START_DATE","dataType":"dateTime"},{"name":"QUARTER_END_DATE","dataType":"dateTime"},{"name":"YEAR_START_DATE","dataType":"dateTime"},{"name":"YEAR_END_DATE","dataType":"dateTime"},{"name":"PERIOD_MONTH","dataType":"string"},{"name":"FC_PERIOD_ID","dataType":"double"},{"name":"FC_QUARTER_ID","dataType":"double"},{"name":"FC_WEEK_ID","dataType":"double"},{"name":"FC_YEAR_OFFSET","dataType":"double"},{"name":"FC_QUARTER_OFFSET","dataType":"double"},{"name":"FC_PERIOD_OFFSET","dataType":"double"},{"name":"FC_WEEK_OFFSET","dataType":"double"},{"name":"FC_DAYS_OFFSET","dataType":"double"},{"name":"FC_HALF","dataType":"string"},{"name":"NQ_FIRST_FISCAL_WEEK","dataType":"string"},{"name":"PQ_LAST_FISCAL_WEEK","dataType":"string"},{"name":"CALENDAR_YEAR","dataType":"double"},{"name":"CALENDAR_MONTH","dataType":"double"},{"name":"CALENDAR_YEARMONTHID","dataType":"string"},{"name":"CALENDAR_MONTHNAME","dataType":"string"},{"name":"CALENDAR_MONTHNAMESHORT","dataType":"string"},{"name":"CALENDAR_ISO_WEEK","dataType":"double"},{"name":"CALENDAR_US_WEEK","dataType":"double"},{"name":"CALENDAR_YEAR_SHORT","dataType":"string"},{"name":"CALENDAR_MTH_YEAR","dataType":"string"},{"name":"DAY_NAME","dataType":"string"},{"name":"DAY_OF_WEEK","dataType":"double"},{"name":"WORKING_DAY_FLAG","dataType":"double"},{"name":"CQ_LAST_FISCAL_WEEK","dataType":"string"},{"name":"ROW_CREATION_DATE","dataType":"date"},{"name":"WEEK_END_FLAG","dataType":"string"},{"name":"MONTH_END_FLAG","dataType":"string"},{"name":"QUARTER_END_FLAG","dataType":"string"},{"name":"YEAR_END_FLAG","dataType":"string"},{"name":"FISCAL_WEEK_INDICATOR","dataType":"string"},{"name":"FISCAL_WEEK_INDICATOR_SORT","dataType":"double"},{"name":"FISCAL_MONTH_INDICATOR","dataType":"string"},{"name":"FISCAL_MONTH_INDICATOR_SORT","dataType":"double"},{"name":"FISCAL_QUARTER_INDICATOR","dataType":"string"},{"name":"FISCAL_QUARTER_INDICATOR_SORT","dataType":"double"},{"name":"FISCAL_YEAR_INDICATOR","dataType":"string"},{"name":"FISCAL_YEAR_INDICATOR_SORT","dataType":"double"},{"name":"EXTRACT_DATE","dataType":"dateTime"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2022-07-05T12:11:33.6805868+00:00","location":"https://wabiwuscpcdsa.blob.core.windows.net:443/d2e244ba-56a2-442b-a811-b138912f586a/DIM_FiscalCalendar_COHR.csv?snapshot=2022-07-05T12%3A11%3A33.6574210Z"}]},{"$type":"LocalEntity","name":"DIM_FiscalCalendar_IIVI","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"DIM_FiscalCalendar_IIVI.csv"},"attributes":[{"name":"PERIOD_SET_NAME","dataType":"string"},{"name":"CAL_DAY","dataType":"dateTime"},{"name":"FISCAL_WEEK","dataType":"string"},{"name":"FISCAL_YEAR_WEEK","dataType":"string"},{"name":"FISCAL_WEEK_DISP","dataType":"string"},{"name":"FISCAL_MONTH_SORT_VALUE","dataType":"string"},{"name":"FISCAL_QUARTER_DISP","dataType":"string"},{"name":"FISCAL_WEEK_NO","dataType":"double"},{"name":"FISCAL_MONTH_WEEK_NO","dataType":"double"},{"name":"FISCAL_QTR_WEEK","dataType":"string"},{"name":"FISCAL_QTR_WEEK_NO","dataType":"double"},{"name":"GL_PERIOD","dataType":"string"},{"name":"PQ_LAST_GL_PERIOD","dataType":"string"},{"name":"PERIOD_YEAR","dataType":"double"},{"name":"FISCAL_YEAR","dataType":"string"},{"name":"QUARTER_NUM","dataType":"double"},{"name":"FISCAL_QUARTER","dataType":"string"},{"name":"FYFQ","dataType":"string"},{"name":"PRIOR_FYFQ","dataType":"string"},{"name":"PERIOD_NAME","dataType":"string"},{"name":"PERIOD_NUM","dataType":"double"},{"name":"FISCAL_DAY","dataType":"double"},{"name":"WEEK_START_DATE","dataType":"date"},{"name":"WEEK_END_DATE","dataType":"date"},{"name":"PERIOD_START_DATE","dataType":"dateTime"},{"name":"PERIOD_END_DATE","dataType":"dateTime"},{"name":"QUARTER_START_DATE","dataType":"dateTime"},{"name":"QUARTER_END_DATE","dataType":"dateTime"},{"name":"YEAR_START_DATE","dataType":"dateTime"},{"name":"YEAR_END_DATE","dataType":"dateTime"},{"name":"PERIOD_MONTH","dataType":"string"},{"name":"FC_PERIOD_ID","dataType":"double"},{"name":"FC_QUARTER_ID","dataType":"double"},{"name":"FC_WEEK_ID","dataType":"double"},{"name":"FC_YEAR_OFFSET","dataType":"double"},{"name":"FC_QUARTER_OFFSET","dataType":"double"},{"name":"FC_PERIOD_OFFSET","dataType":"double"},{"name":"FC_WEEK_OFFSET","dataType":"double"},{"name":"FC_DAYS_OFFSET","dataType":"double"},{"name":"FC_HALF","dataType":"string"},{"name":"NQ_FIRST_FISCAL_WEEK","dataType":"string"},{"name":"PQ_LAST_FISCAL_WEEK","dataType":"string"},{"name":"CALENDAR_YEAR","dataType":"double"},{"name":"CALENDAR_MONTH","dataType":"double"},{"name":"CALENDAR_YEARMONTHID","dataType":"string"},{"name":"CALENDAR_MONTHNAME","dataType":"string"},{"name":"CALENDAR_MONTHNAMESHORT","dataType":"string"},{"name":"CALENDAR_ISO_WEEK","dataType":"double"},{"name":"CALENDAR_US_WEEK","dataType":"double"},{"name":"CALENDAR_YEAR_SHORT","dataType":"string"},{"name":"CALENDAR_MTH_YEAR","dataType":"string"},{"name":"DAY_NAME","dataType":"string"},{"name":"DAY_OF_WEEK","dataType":"double"},{"name":"WORKING_DAY_FLAG","dataType":"double"},{"name":"CQ_LAST_FISCAL_WEEK","dataType":"string"},{"name":"ROW_CREATION_DATE","dataType":"date"},{"name":"WEEK_END_FLAG","dataType":"string"},{"name":"MONTH_END_FLAG","dataType":"string"},{"name":"QUARTER_END_FLAG","dataType":"string"},{"name":"YEAR_END_FLAG","dataType":"string"},{"name":"FISCAL_WEEK_INDICATOR","dataType":"string"},{"name":"FISCAL_WEEK_INDICATOR_SORT","dataType":"double"},{"name":"FISCAL_MONTH_INDICATOR","dataType":"string"},{"name":"FISCAL_MONTH_INDICATOR_SORT","dataType":"double"},{"name":"FISCAL_QUARTER_INDICATOR","dataType":"string"},{"name":"FISCAL_QUARTER_INDICATOR_SORT","dataType":"double"},{"name":"FISCAL_YEAR_INDICATOR","dataType":"string"},{"name":"FISCAL_YEAR_INDICATOR_SORT","dataType":"double"},{"name":"EXTRACT_DATE","dataType":"dateTime"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2022-07-05T12:11:36.415137+00:00","location":"https://wabiwuscpcdsa.blob.core.windows.net:443/d2e244ba-56a2-442b-a811-b138912f586a/DIM_FiscalCalendar_IIVI.csv?snapshot=2022-07-05T12%3A11%3A36.3928699Z"}]},{"$type":"LocalEntity","name":"Version History Dataflow","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Version%20History%20Dataflow.csv"},"attributes":[{"name":"Version Number","dataType":"string"},{"name":"Revision Date/Time","dataType":"dateTime"},{"name":"Developer Name","dataType":"string"},{"name":"Revision Notes","dataType":"string"},{"name":"Revision Type","dataType":"string"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2022-07-05T12:11:09.9931116+00:00","location":"https://wabiwuscpcdsa.blob.core.windows.net:443/d2e244ba-56a2-442b-a811-b138912f586a/Version%20History%20Dataflow.csv?snapshot=2022-07-05T12%3A11%3A09.9708528Z"}]},{"$type":"LocalEntity","name":"INFO_DataUpdateInfoInventoryVelocity","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"INFO_DataUpdateInfoInventoryVelocity.csv"},"attributes":[{"name":"TABLE_NAME","dataType":"string"},{"name":"DATA_UPDATE_DATE","dataType":"dateTime"},{"name":"DATA_UPDATE_DESC","dataType":"string"},{"name":"DATA_FLOW_REFRESH_DATE","dataType":"dateTime"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2022-07-05T12:11:20.1836308+00:00","location":"https://wabiwuscpcdsa.blob.core.windows.net:443/d2e244ba-56a2-442b-a811-b138912f586a/INFO_DataUpdateInfoInventoryVelocity.csv?snapshot=2022-07-05T12%3A11%3A20.1450838Z"}]}]}